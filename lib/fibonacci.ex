defmodule Fibonacci do
  @doc """
  Each new term in the Fibonacci sequence is generated by adding the previous
  two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.

  Examples

    iex> Fibonacci.process(4000000)
    4613732
  """

  @spec process(any) :: integer()
  def process(n) do
    Stream.iterate(0, &(&1 + 1))
    |> Stream.map(&fib_cal(&1))
    |> Stream.filter(&(rem(&1, 2) == 0))
    |> Enum.reduce_while(0, fn x, acc ->
      if x < n, do: {:cont, acc + x}, else: {:halt, acc}
    end)
  end

  @spec fib_cal(non_neg_integer) :: non_neg_integer
  def fib_cal(0), do: 0

  def fib_cal(1), do: 1

  def fib_cal(n), do: fib_cal(n - 1) + fib_cal(n - 2)
end
